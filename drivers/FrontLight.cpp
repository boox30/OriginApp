#include "drivers/FrontLight.h"

#include <linux/input.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <linux/kd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include "drivers/DeviceInfo.h"
#include "interface.h"
#include <stdio.h>

using namespace std;

#ifdef _KINDLE_LINUX
int FrontLight::m_fl = -1;          // fd for frontLight

static const char *psz_fl="/dev/yoshime_fl";
static const char *fl_config_file="/var/local/system/fl_intensity_dk";

#define FL_MAGIC_NUMBER				0x4C    // 'L'
#define FL_SET_INTENSITY			_IOW(FL_MAGIC_NUMBER, 0x1, int32_t)		// 0x40044C01
#define FL_GET_INTENSITY			_IOR(FL_MAGIC_NUMBER, 0x2, int32_t)		// 0x80044C02
#define FL_GET_MAX_INTENSITY		_IOR(FL_MAGIC_NUMBER, 0x3, int32_t)		// 0x80044C03

// frontlight inverse map:  intensity (0 - 255)  to level(0 - 24) , map for duokan
static const unsigned char flmap_inv[256] = {
	0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 
	0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 
	0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 
	0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 
	0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 
	0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 
	0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 
	0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 
	0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
	0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
	0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
	0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18
};

// frontlight map:  level(0 - 24) to intensity (0 - 255), map for duokan
static const unsigned char flmap[25] = {
	0x00, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0D, 0x13, 0x1A, 0x24, 0x2F, 0x3C, 
	0x4B, 0x5A, 0x6B, 0x7E, 0x93, 0xAA, 0xC4, 0xE0, 0xFE
};

//  map for kindle
static const unsigned char flmap_inv_kindle[256] = {
	0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 
	0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 
	0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 
	0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 
	0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 
	0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 
	0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
	0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 
	0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 
	0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
	0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
	0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
	0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18
};

//  the original map of kindle
static const unsigned char flmap_kindle[25] = {
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0D, 0x13, 0x1A, 0x24, 0x2F, 0x3C, 
	0x4B, 0x5A, 0x6B, 0x7E, 0x93, 0xAA, 0xC4, 0xE0, 0xFE
};

#define DLC_FRONTLIGHT  DLC_LUOXP
#endif
#ifdef _X86_LINUX
int FrontLight::s_level = 12;
#endif

void FrontLight::InitDevice()
{
#ifdef _X86_LINUX
#else
	if (m_fl < 0) 
	{
		m_fl = open(psz_fl, O_RDWR);
	}
#endif
}

void FrontLight::CloseDevice()
{
#ifdef _X86_LINUX
#else
	if (m_fl >= 0)
	{
		close(m_fl);
	}
	m_fl = - 1;
#endif
}

int FrontLight::GetLevel()
{
#ifdef _X86_LINUX
    return s_level;
#else
	int intensity = GetIntensity() & 0xFF;
	return flmap_inv[intensity];
#endif
}

bool FrontLight::SetLevel(int level)
{
	if (level < 0)
	{
		level = 0;
	}
	
	if (level > 24)
	{
		level = 24;
	}

#ifdef _X86_LINUX
    s_level = level;
    return true;
#else
	int intensity = flmap[level];

	return SetIntensity(intensity);
#endif
}

// 系统启动时，采用flmap_kindle， 以保证始终有光
bool FrontLight::SetLevelKindle(int level)
{
	if (level < 0)
	{
		level = 0;
	}
	
	if (level > 24)
	{
		level = 24;
	}

#ifdef _X86_LINUX
    s_level = level;
    return true;
#else
	int intensity = flmap_kindle[level];

	return SetIntensity(intensity);
#endif
}

#ifdef _KINDLE_LINUX
int FrontLight::GetMaxIntensity()
{
	InitDevice();
	if (m_fl < 0)
	{
		DebugPrintf(DLC_FRONTLIGHT, "GetMaxIntensity() m_fl: %d", m_fl);
		return -1;
	}
	unsigned int val = 0;
	ioctl(m_fl, FL_GET_MAX_INTENSITY, &val);
	DebugPrintf(DLC_FRONTLIGHT, "GetMaxIntensity() return: %d", val);
	return val;
}


int FrontLight::GetIntensity()
{
	InitDevice();
	if (m_fl < 0)
	{
		DebugPrintf(DLC_FRONTLIGHT, "GetMaxIntensity() m_fl: %d", m_fl);
		return -1;
	}
	unsigned int val = 0;
	ioctl(m_fl, FL_GET_INTENSITY, &val);
	DebugPrintf(DLC_FRONTLIGHT, "GetIntensity() return: %d", val);
	return val;
}

bool FrontLight::SetIntensity(int intensity)
{
	InitDevice();
	if (m_fl < 0)
	{
		DebugPrintf(DLC_FRONTLIGHT, "GetMaxIntensity() m_fl: %d", m_fl);
		return false;
	}
	unsigned int val = intensity;
	ioctl(m_fl, FL_SET_INTENSITY, &val);
	DebugPrintf(DLC_FRONTLIGHT, "FrontLightSetIntensity(): %d", val);
	return true;
}


void FrontLight::Reset(void)
{	
	SetLevel(ReadSystemLevel());
	// SetLevelKindle(ReadSystemLevel());
}

int FrontLight::ReadSystemLevel()
{
	FILE *fp = fopen(fl_config_file,"rb");
    if(!fp)
    {
		DebugPrintf(DLC_FRONTLIGHT, "FrontLightReadSystemLevel(): fp(NULL)");
        return GetLevel();
    }

	char buff[4] = {0};
	int level = 0;
	
	if(fread(buff,1,sizeof(buff),fp) == 0) 
	{
		level = GetLevel();
		DebugPrintf(DLC_FRONTLIGHT, "FrontLightReadSystemLevel(): Get(%d)", level);
	}else
	{
		level = buff[0];
		DebugPrintf(DLC_FRONTLIGHT, "FrontLightReadSystemLevel(): Read(%d)", level);
	}

	fclose(fp);
	return level;
}

bool FrontLight::WriteSystemLevel()
{
    int level = GetLevel();
	char buff[4] = {0};
	buff[0] = level & 0xFF;

	FILE *fp = fopen(fl_config_file,"wb");
    if(!fp)
    {
		DebugPrintf(DLC_FRONTLIGHT, "WriteSystemLevel(): fp(NULL)");
		return false;
    }
	
	bool bOK;
	if(fwrite(buff,1,sizeof(buff),fp) == 0) 
	{
		bOK = false;
		DebugPrintf(DLC_FRONTLIGHT, "WriteSystemLevel(): (%d) Fail", level);
	}else
	{
		bOK = true;
		DebugPrintf(DLC_FRONTLIGHT, "WriteSystemLevel(): (%d) OK", level);
	}

	fclose(fp);

	return bOK;
}
#endif
#ifdef _X86_LINUX
bool FrontLight::WriteSystemLevel()
{
    return true;
}

void FrontLight::Reset()
{
}
#endif
