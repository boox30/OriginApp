// 加密后的rsa_data被分解成为data1和data2
// getdata1
// getdata2
// x,y都是混淆数据,可以用任意随机数据填充
// 调用get_rsa_n_1024即可得到完整的rsa_n


// 等价于 memset(buf, c , len )
static void memsetbuf(unsigned char *buf, unsigned char c,  int len)
{
	int i;
	unsigned char ch = 0x33;

	if(len == 0)
		return;

	for (i = 0 ; i < len; i++) {
		buf[i] ^= buf[i];
		buf[i] += i;
		buf[i] ^= ch;
	}
	for (i = len-1 ; i != -1; i--) {
		buf[i] ^= ch;
		buf[i] -= i;
		buf[i] ^= c;
	}
}

// 等价于 memcpy(buf, src, len)
static void memcpybuf(unsigned char *buf, unsigned char *src, int len)
{
	int i;

	if(len == 0)
		return;

	// 迷惑代码
	if (len > 1) {
		memsetbuf(buf, src[len-1], len);
	}else {
		memsetbuf(buf, src[0], len);
	}

	// 清零， 并复制
	memsetbuf(buf, 0, len);
	for(i = 0; i < len; i++) {
		buf[i] ^= src[i];
	}

}


// 在发布Release版本时 , case 0 注释掉
// 0, 1为有效 case; 其余为无用的混淆case
static void xstream(unsigned char *p, int method,  unsigned int seek)
{
	int i;
	switch(method) 
	{

#if 0
	case 0:
		for(i = 0; i < seek; i++ ) {
			p[i] ^= p[i+1];
		}
		break;
#endif

	case 1:
		for(i = seek-1; i != 0; i-- ) {
			p[i] ^= p[i+1];
		}

		p[0] ^= p[1];
		break;	
	case 2:
		if((int)seek > method) {
			memsetbuf(p, seek & 0xFF, method);
		}else {
			memsetbuf(p, method &0xFF, seek);
		}
		break;
	case 3:
		if((int)seek > method) {
			memcpybuf(p, p, seek);
		}else {
			memcpybuf(p, p, method);
		}
		break;
	default:
		memcpybuf(p, p, method);
		break;
	}

	return;
}

int getdata1(unsigned char *buf)
{

	unsigned char x[] = {
		0xC6, 0x74, 0x16, 0xE5, 0xA2, 0xF0, 0xDF, 0x99, 0x4E, 0xCE, 0x55, 0x67, 0x89, 0x33, 0x48, 0x48, 
		0x7A, 0x1C, 0x95, 0xA4, 0x3E, 0x0D, 0xE1, 0x35, 0xA3, 0x4F, 0x2A, 0x06, 0xEA, 0xC7, 0xAD, 0xF0, 
		0x21, 0x57, 0xBF, 0xF6 };

	unsigned char data1[67] = { 
		0xF2, 0xCC, 0x95, 0x50, 0x64, 0x3A, 0xA2, 0x3A, 0xDE, 0x63, 0x0C, 0x68, 0x88, 0x50, 0xE6, 0x32,
		0x74, 0xC2, 0xF8, 0xD6, 0x0D, 0x55, 0x44, 0x53, 0xF3, 0x43, 0xBF, 0x80, 0x1E, 0xB9, 0x97, 0x9F,
		0xF3, 0xF7, 0x40, 0x89, 0x76, 0x8E, 0xEB, 0x33, 0x6C, 0xF5, 0x97, 0xAE, 0x78, 0x95, 0x25, 0xD0,
		0x9A, 0x79, 0xC6, 0x41, 0xAB, 0xA2, 0x20, 0xE3, 0xD2, 0x67, 0x5F, 0x43, 0x8F, 0x93, 0x70, 0xDA,
		0x04, 0xB9, 0x78 };

	int len = sizeof(data1);
	
	unsigned char y[] = {
		0xA0, 0x32, 0x8B, 0xE6, 0xE0, 0xBA, 0xAE, 0xB7, 0x98, 0x63, 0x38, 0x81, 0x99, 0xAB, 0xF4, 0xEC, 
		0xF6 };
	
	if( sizeof(y) > sizeof(x)) {
		memsetbuf(y, 0, sizeof(y));
		memcpybuf(y, x, sizeof(x));
	}else {
		memcpybuf(x, y, sizeof(y));
	}

	memcpybuf(buf, data1, len);
	memsetbuf(data1, 0, len);
	return  len;
}

int getdata2(unsigned char *buf)
{

	// 混淆用的脏数据
	unsigned char x[] = {
		0x26, 0x1A, 0x7F, 0x06, 0xC7, 0x00, 0xCC, 0xBA, 0x7B, 0x85, 0x05, 0xAE, 0xA2, 0xE8, 0x27, 0x41, 
		0x32, 0xA6, 0xC9, 0xD1, 0x2A, 0x99, 0x26, 0x3B, 0xBD, 0xBC, 0xB6, 0xD8, 0xB7, 0x2F, 0x67, 0x57, 
		0x1F, 0x76, 0x50, 0x82, 0x5F, 0xA3, 0x07, 0xCD };

	unsigned char data2[61] = { 
		0xE1, 0x08, 0x94, 0x8B, 0x38, 0x49, 0x95, 0x64, 0xF2, 0x4A, 0x43, 0x22, 0x20, 0xC5, 0x48, 0x5A,
		0xBB, 0x1B, 0x85, 0x50, 0x4F, 0x39, 0x92, 0xD2, 0x81, 0x0C, 0x0C, 0xD0, 0xC1, 0x0E, 0xF4, 0xF5,
		0x2A, 0x14, 0x3A, 0xA3, 0x6D, 0x27, 0x93, 0xB1, 0xF0, 0x9C, 0x69, 0x60, 0xCB, 0x9A, 0xCB, 0xC0,
		0xD6, 0xDB, 0x2B, 0x16, 0x13, 0x78, 0x61, 0x07, 0xD8, 0xC4, 0x27, 0x5C, 0x24 };

	int len = sizeof(data2);

	unsigned char y[] = {
		0xB8, 0x12, 0xEE, 0x0C, 0xC6, 0xBC, 0x61, 0x80, 0x32, 0xF9, 0xAB, 0x63, 0xCF, 0xCA, 0xA4, 0x29, 
		0x7B, 0x0E, 0x1C, 0xC3, 0x44, 0x8C, 0x99, 0xF2, 0x1F, 0x9E, 0xF5, 0x89, 0xD1, 0x6D, 0xC2, 0xFB, 
		0x16, 0x00, 0x09 };
		
	if( sizeof(y) > sizeof(x)) {
		memcpybuf(y, x, sizeof(x));
	}else {
		memcpybuf(x, y, sizeof(y));
	}

	memcpybuf(buf, data2, len);
	memsetbuf(data2, 0, len);
	return  len;
}

int getmagic(unsigned char *buf)
{
	unsigned char magic[] = { 0xCB } ;
	int len = sizeof(magic);

	memcpybuf(buf, magic, len);
	return len;

}
void GetRSAN(unsigned char *n, int nbits) 
{
	unsigned char buf[4096];
	unsigned char *p;
	int len;
	int seek= (nbits+7)/ 8;


	memsetbuf(buf, 0, sizeof(buf));

	len = 0;
	p = buf;
	len = getdata1(p);
	p += len;
	len = getdata2(p);
	p += len;
	len = getmagic(p);
	xstream(buf, 1, seek);	

	memcpybuf(n, buf, seek);
	memsetbuf(buf, 0, sizeof(buf));
	return;
}

// 默认为RSA 1024； 将来可能支持 1536 或者 2048
int get_rsa_n(unsigned char *buf, unsigned int i)
{
	int nbits[] = {1024, 1536, 2048};
	int nn;


	if( i < 3  )
		nn = nbits[i];
	else
		nn = nbits[0];

	GetRSAN(buf, nn);

	return 0;
}

// 默认为RSA 1024； 将来可能支持 1536 或者 2048
int get_rsa_n_1024(unsigned char *buf)
{

	GetRSAN(buf, 1024);
	return 0;
}


